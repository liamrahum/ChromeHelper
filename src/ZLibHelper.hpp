//NOTE: This code was generated by ChatGPT, as I couldn't find other implementaions online, I take no credit for this code.
#include <iostream>
#include <sstream>
#include "zlib/zlib.h"

std::string compressString(const std::string& input) {
    z_stream zlibStream;
    zlibStream.zalloc = Z_NULL;
    zlibStream.zfree = Z_NULL;
    zlibStream.opaque = Z_NULL;

    if (deflateInit(&zlibStream, Z_DEFAULT_COMPRESSION) != Z_OK) {
        std::cerr << "Failed to initialize zlib for compression\n";
        return "";
    }

    std::stringstream compressedStream;
    char buffer[4096];

    zlibStream.avail_in = static_cast<uInt>(input.size());
    zlibStream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(input.c_str()));

    do {
        zlibStream.avail_out = sizeof(buffer);
        zlibStream.next_out = reinterpret_cast<Bytef*>(buffer);

        if (deflate(&zlibStream, Z_FINISH) == Z_STREAM_ERROR) {
            std::cerr << "Compression error\n";
            deflateEnd(&zlibStream);
            return "";
        }

        compressedStream.write(buffer, sizeof(buffer) - zlibStream.avail_out);
    } while (zlibStream.avail_out == 0);

    deflateEnd(&zlibStream);

    return compressedStream.str();
}

std::string decompressString(const std::string& compressedInput) {
    z_stream zlibStream;
    zlibStream.zalloc = Z_NULL;
    zlibStream.zfree = Z_NULL;
    zlibStream.opaque = Z_NULL;

    if (inflateInit(&zlibStream) != Z_OK) {
        std::cerr << "Failed to initialize zlib for decompression\n";
        return "";
    }

    std::stringstream decompressedStream;
    char buffer[4096];

    zlibStream.avail_in = static_cast<uInt>(compressedInput.size());
    zlibStream.next_in = reinterpret_cast<Bytef*>(const_cast<char*>(compressedInput.c_str()));

    do {
        zlibStream.avail_out = sizeof(buffer);
        zlibStream.next_out = reinterpret_cast<Bytef*>(buffer);

        if (inflate(&zlibStream, Z_NO_FLUSH) == Z_STREAM_ERROR) {
            std::cerr << "Decompression error\n";
            inflateEnd(&zlibStream);
            return "";
        }

        decompressedStream.write(buffer, sizeof(buffer) - zlibStream.avail_out);
    } while (zlibStream.avail_out == 0);

    inflateEnd(&zlibStream);

    return decompressedStream.str();
}


